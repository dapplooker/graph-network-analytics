// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountCreated extends ethereum.Event {
  get params(): AccountCreated__Params {
    return new AccountCreated__Params(this);
  }
}

export class AccountCreated__Params {
  _event: AccountCreated;

  constructor(event: AccountCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AccountDataEncryptionKeySet extends ethereum.Event {
  get params(): AccountDataEncryptionKeySet__Params {
    return new AccountDataEncryptionKeySet__Params(this);
  }
}

export class AccountDataEncryptionKeySet__Params {
  _event: AccountDataEncryptionKeySet;

  constructor(event: AccountDataEncryptionKeySet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dataEncryptionKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class AccountMetadataURLSet extends ethereum.Event {
  get params(): AccountMetadataURLSet__Params {
    return new AccountMetadataURLSet__Params(this);
  }
}

export class AccountMetadataURLSet__Params {
  _event: AccountMetadataURLSet;

  constructor(event: AccountMetadataURLSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get metadataURL(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class AccountNameSet extends ethereum.Event {
  get params(): AccountNameSet__Params {
    return new AccountNameSet__Params(this);
  }
}

export class AccountNameSet__Params {
  _event: AccountNameSet;

  constructor(event: AccountNameSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class AccountWalletAddressSet extends ethereum.Event {
  get params(): AccountWalletAddressSet__Params {
    return new AccountWalletAddressSet__Params(this);
  }
}

export class AccountWalletAddressSet__Params {
  _event: AccountWalletAddressSet;

  constructor(event: AccountWalletAddressSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AttestationSignerAuthorized extends ethereum.Event {
  get params(): AttestationSignerAuthorized__Params {
    return new AttestationSignerAuthorized__Params(this);
  }
}

export class AttestationSignerAuthorized__Params {
  _event: AttestationSignerAuthorized;

  constructor(event: AttestationSignerAuthorized) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AttestationSignerRemoved extends ethereum.Event {
  get params(): AttestationSignerRemoved__Params {
    return new AttestationSignerRemoved__Params(this);
  }
}

export class AttestationSignerRemoved__Params {
  _event: AttestationSignerRemoved;

  constructor(event: AttestationSignerRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DefaultSignerRemoved extends ethereum.Event {
  get params(): DefaultSignerRemoved__Params {
    return new DefaultSignerRemoved__Params(this);
  }
}

export class DefaultSignerRemoved__Params {
  _event: DefaultSignerRemoved;

  constructor(event: DefaultSignerRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DefaultSignerSet extends ethereum.Event {
  get params(): DefaultSignerSet__Params {
    return new DefaultSignerSet__Params(this);
  }
}

export class DefaultSignerSet__Params {
  _event: DefaultSignerSet;

  constructor(event: DefaultSignerSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class IndexedSignerRemoved extends ethereum.Event {
  get params(): IndexedSignerRemoved__Params {
    return new IndexedSignerRemoved__Params(this);
  }
}

export class IndexedSignerRemoved__Params {
  _event: IndexedSignerRemoved;

  constructor(event: IndexedSignerRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class IndexedSignerSet extends ethereum.Event {
  get params(): IndexedSignerSet__Params {
    return new IndexedSignerSet__Params(this);
  }
}

export class IndexedSignerSet__Params {
  _event: IndexedSignerSet;

  constructor(event: IndexedSignerSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class LegacySignerRemoved extends ethereum.Event {
  get params(): LegacySignerRemoved__Params {
    return new LegacySignerRemoved__Params(this);
  }
}

export class LegacySignerRemoved__Params {
  _event: LegacySignerRemoved;

  constructor(event: LegacySignerRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class LegacySignerSet extends ethereum.Event {
  get params(): LegacySignerSet__Params {
    return new LegacySignerSet__Params(this);
  }
}

export class LegacySignerSet__Params {
  _event: LegacySignerSet;

  constructor(event: LegacySignerSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OffchainStorageRootAdded extends ethereum.Event {
  get params(): OffchainStorageRootAdded__Params {
    return new OffchainStorageRootAdded__Params(this);
  }
}

export class OffchainStorageRootAdded__Params {
  _event: OffchainStorageRootAdded;

  constructor(event: OffchainStorageRootAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get url(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class OffchainStorageRootRemoved extends ethereum.Event {
  get params(): OffchainStorageRootRemoved__Params {
    return new OffchainStorageRootRemoved__Params(this);
  }
}

export class OffchainStorageRootRemoved__Params {
  _event: OffchainStorageRootRemoved;

  constructor(event: OffchainStorageRootRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get url(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegistrySet extends ethereum.Event {
  get params(): RegistrySet__Params {
    return new RegistrySet__Params(this);
  }
}

export class RegistrySet__Params {
  _event: RegistrySet;

  constructor(event: RegistrySet) {
    this._event = event;
  }

  get registryAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SignerAuthorizationCompleted extends ethereum.Event {
  get params(): SignerAuthorizationCompleted__Params {
    return new SignerAuthorizationCompleted__Params(this);
  }
}

export class SignerAuthorizationCompleted__Params {
  _event: SignerAuthorizationCompleted;

  constructor(event: SignerAuthorizationCompleted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SignerAuthorizationStarted extends ethereum.Event {
  get params(): SignerAuthorizationStarted__Params {
    return new SignerAuthorizationStarted__Params(this);
  }
}

export class SignerAuthorizationStarted__Params {
  _event: SignerAuthorizationStarted;

  constructor(event: SignerAuthorizationStarted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SignerAuthorized extends ethereum.Event {
  get params(): SignerAuthorized__Params {
    return new SignerAuthorized__Params(this);
  }
}

export class SignerAuthorized__Params {
  _event: SignerAuthorized;

  constructor(event: SignerAuthorized) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SignerRemoved extends ethereum.Event {
  get params(): SignerRemoved__Params {
    return new SignerRemoved__Params(this);
  }
}

export class SignerRemoved__Params {
  _event: SignerRemoved;

  constructor(event: SignerRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ValidatorSignerAuthorized extends ethereum.Event {
  get params(): ValidatorSignerAuthorized__Params {
    return new ValidatorSignerAuthorized__Params(this);
  }
}

export class ValidatorSignerAuthorized__Params {
  _event: ValidatorSignerAuthorized;

  constructor(event: ValidatorSignerAuthorized) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ValidatorSignerRemoved extends ethereum.Event {
  get params(): ValidatorSignerRemoved__Params {
    return new ValidatorSignerRemoved__Params(this);
  }
}

export class ValidatorSignerRemoved__Params {
  _event: ValidatorSignerRemoved;

  constructor(event: ValidatorSignerRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VoteSignerAuthorized extends ethereum.Event {
  get params(): VoteSignerAuthorized__Params {
    return new VoteSignerAuthorized__Params(this);
  }
}

export class VoteSignerAuthorized__Params {
  _event: VoteSignerAuthorized;

  constructor(event: VoteSignerAuthorized) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VoteSignerRemoved extends ethereum.Event {
  get params(): VoteSignerRemoved__Params {
    return new VoteSignerRemoved__Params(this);
  }
}

export class VoteSignerRemoved__Params {
  _event: VoteSignerRemoved;

  constructor(event: VoteSignerRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Accounts__batchGetMetadataURLResult {
  value0: Array<BigInt>;
  value1: Bytes;

  constructor(value0: Array<BigInt>, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class Accounts__getOffchainStorageRootsResult {
  value0: Bytes;
  value1: Array<BigInt>;

  constructor(value0: Bytes, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class Accounts__getVersionNumberResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class Accounts extends ethereum.SmartContract {
  static bind(address: Address): Accounts {
    return new Accounts("Accounts", address);
  }

  EIP712_AUTHORIZE_SIGNER_TYPEHASH(): Bytes {
    let result = super.call(
      "EIP712_AUTHORIZE_SIGNER_TYPEHASH",
      "EIP712_AUTHORIZE_SIGNER_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_EIP712_AUTHORIZE_SIGNER_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EIP712_AUTHORIZE_SIGNER_TYPEHASH",
      "EIP712_AUTHORIZE_SIGNER_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  attestationSignerToAccount(signer: Address): Address {
    let result = super.call(
      "attestationSignerToAccount",
      "attestationSignerToAccount(address):(address)",
      [ethereum.Value.fromAddress(signer)]
    );

    return result[0].toAddress();
  }

  try_attestationSignerToAccount(
    signer: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "attestationSignerToAccount",
      "attestationSignerToAccount(address):(address)",
      [ethereum.Value.fromAddress(signer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  authorizedBy(param0: Address): Address {
    let result = super.call("authorizedBy", "authorizedBy(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_authorizedBy(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "authorizedBy",
      "authorizedBy(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  batchGetMetadataURL(
    accountsToQuery: Array<Address>
  ): Accounts__batchGetMetadataURLResult {
    let result = super.call(
      "batchGetMetadataURL",
      "batchGetMetadataURL(address[]):(uint256[],bytes)",
      [ethereum.Value.fromAddressArray(accountsToQuery)]
    );

    return new Accounts__batchGetMetadataURLResult(
      result[0].toBigIntArray(),
      result[1].toBytes()
    );
  }

  try_batchGetMetadataURL(
    accountsToQuery: Array<Address>
  ): ethereum.CallResult<Accounts__batchGetMetadataURLResult> {
    let result = super.tryCall(
      "batchGetMetadataURL",
      "batchGetMetadataURL(address[]):(uint256[],bytes)",
      [ethereum.Value.fromAddressArray(accountsToQuery)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Accounts__batchGetMetadataURLResult(
        value[0].toBigIntArray(),
        value[1].toBytes()
      )
    );
  }

  createAccount(): boolean {
    let result = super.call("createAccount", "createAccount():(bool)", []);

    return result[0].toBoolean();
  }

  try_createAccount(): ethereum.CallResult<boolean> {
    let result = super.tryCall("createAccount", "createAccount():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  eip712DomainSeparator(): Bytes {
    let result = super.call(
      "eip712DomainSeparator",
      "eip712DomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_eip712DomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "eip712DomainSeparator",
      "eip712DomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAttestationSigner(account: Address): Address {
    let result = super.call(
      "getAttestationSigner",
      "getAttestationSigner(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toAddress();
  }

  try_getAttestationSigner(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAttestationSigner",
      "getAttestationSigner(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDataEncryptionKey(account: Address): Bytes {
    let result = super.call(
      "getDataEncryptionKey",
      "getDataEncryptionKey(address):(bytes)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBytes();
  }

  try_getDataEncryptionKey(account: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDataEncryptionKey",
      "getDataEncryptionKey(address):(bytes)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDefaultSigner(account: Address, role: Bytes): Address {
    let result = super.call(
      "getDefaultSigner",
      "getDefaultSigner(address,bytes32):(address)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toAddress();
  }

  try_getDefaultSigner(
    account: Address,
    role: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDefaultSigner",
      "getDefaultSigner(address,bytes32):(address)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIndexedSigner(account: Address, role: Bytes): Address {
    let result = super.call(
      "getIndexedSigner",
      "getIndexedSigner(address,bytes32):(address)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toAddress();
  }

  try_getIndexedSigner(
    account: Address,
    role: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getIndexedSigner",
      "getIndexedSigner(address,bytes32):(address)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLegacySigner(_account: Address, role: Bytes): Address {
    let result = super.call(
      "getLegacySigner",
      "getLegacySigner(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromFixedBytes(role)
      ]
    );

    return result[0].toAddress();
  }

  try_getLegacySigner(
    _account: Address,
    role: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLegacySigner",
      "getLegacySigner(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromFixedBytes(role)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMetadataURL(account: Address): string {
    let result = super.call(
      "getMetadataURL",
      "getMetadataURL(address):(string)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toString();
  }

  try_getMetadataURL(account: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getMetadataURL",
      "getMetadataURL(address):(string)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getName(account: Address): string {
    let result = super.call("getName", "getName(address):(string)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toString();
  }

  try_getName(account: Address): ethereum.CallResult<string> {
    let result = super.tryCall("getName", "getName(address):(string)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getOffchainStorageRoots(
    account: Address
  ): Accounts__getOffchainStorageRootsResult {
    let result = super.call(
      "getOffchainStorageRoots",
      "getOffchainStorageRoots(address):(bytes,uint256[])",
      [ethereum.Value.fromAddress(account)]
    );

    return new Accounts__getOffchainStorageRootsResult(
      result[0].toBytes(),
      result[1].toBigIntArray()
    );
  }

  try_getOffchainStorageRoots(
    account: Address
  ): ethereum.CallResult<Accounts__getOffchainStorageRootsResult> {
    let result = super.tryCall(
      "getOffchainStorageRoots",
      "getOffchainStorageRoots(address):(bytes,uint256[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Accounts__getOffchainStorageRootsResult(
        value[0].toBytes(),
        value[1].toBigIntArray()
      )
    );
  }

  getRoleAuthorizationSigner(
    account: Address,
    signer: Address,
    role: Bytes,
    v: i32,
    r: Bytes,
    s: Bytes
  ): Address {
    let result = super.call(
      "getRoleAuthorizationSigner",
      "getRoleAuthorizationSigner(address,address,bytes32,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleAuthorizationSigner(
    account: Address,
    signer: Address,
    role: Bytes,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleAuthorizationSigner",
      "getRoleAuthorizationSigner(address,address,bytes32,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getValidatorSigner(account: Address): Address {
    let result = super.call(
      "getValidatorSigner",
      "getValidatorSigner(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toAddress();
  }

  try_getValidatorSigner(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getValidatorSigner",
      "getValidatorSigner(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVersionNumber(): Accounts__getVersionNumberResult {
    let result = super.call(
      "getVersionNumber",
      "getVersionNumber():(uint256,uint256,uint256,uint256)",
      []
    );

    return new Accounts__getVersionNumberResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getVersionNumber(): ethereum.CallResult<
    Accounts__getVersionNumberResult
  > {
    let result = super.tryCall(
      "getVersionNumber",
      "getVersionNumber():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Accounts__getVersionNumberResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getVoteSigner(account: Address): Address {
    let result = super.call(
      "getVoteSigner",
      "getVoteSigner(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toAddress();
  }

  try_getVoteSigner(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVoteSigner",
      "getVoteSigner(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWalletAddress(account: Address): Address {
    let result = super.call(
      "getWalletAddress",
      "getWalletAddress(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toAddress();
  }

  try_getWalletAddress(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWalletAddress",
      "getWalletAddress(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasAuthorizedAttestationSigner(account: Address): boolean {
    let result = super.call(
      "hasAuthorizedAttestationSigner",
      "hasAuthorizedAttestationSigner(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_hasAuthorizedAttestationSigner(
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAuthorizedAttestationSigner",
      "hasAuthorizedAttestationSigner(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasAuthorizedSigner(account: Address, role: string): boolean {
    let result = super.call(
      "hasAuthorizedSigner",
      "hasAuthorizedSigner(address,string):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromString(role)]
    );

    return result[0].toBoolean();
  }

  try_hasAuthorizedSigner(
    account: Address,
    role: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAuthorizedSigner",
      "hasAuthorizedSigner(address,string):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromString(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasAuthorizedValidatorSigner(account: Address): boolean {
    let result = super.call(
      "hasAuthorizedValidatorSigner",
      "hasAuthorizedValidatorSigner(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_hasAuthorizedValidatorSigner(
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAuthorizedValidatorSigner",
      "hasAuthorizedValidatorSigner(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasAuthorizedVoteSigner(account: Address): boolean {
    let result = super.call(
      "hasAuthorizedVoteSigner",
      "hasAuthorizedVoteSigner(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_hasAuthorizedVoteSigner(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAuthorizedVoteSigner",
      "hasAuthorizedVoteSigner(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasDefaultSigner(account: Address, role: Bytes): boolean {
    let result = super.call(
      "hasDefaultSigner",
      "hasDefaultSigner(address,bytes32):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBoolean();
  }

  try_hasDefaultSigner(
    account: Address,
    role: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasDefaultSigner",
      "hasDefaultSigner(address,bytes32):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasIndexedSigner(account: Address, role: Bytes): boolean {
    let result = super.call(
      "hasIndexedSigner",
      "hasIndexedSigner(address,bytes32):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBoolean();
  }

  try_hasIndexedSigner(
    account: Address,
    role: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasIndexedSigner",
      "hasIndexedSigner(address,bytes32):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasLegacySigner(account: Address, role: Bytes): boolean {
    let result = super.call(
      "hasLegacySigner",
      "hasLegacySigner(address,bytes32):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBoolean();
  }

  try_hasLegacySigner(
    account: Address,
    role: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasLegacySigner",
      "hasLegacySigner(address,bytes32):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAccount(account: Address): boolean {
    let result = super.call("isAccount", "isAccount(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isAccount(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAccount", "isAccount(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAuthorizedSigner(signer: Address): boolean {
    let result = super.call(
      "isAuthorizedSigner",
      "isAuthorizedSigner(address):(bool)",
      [ethereum.Value.fromAddress(signer)]
    );

    return result[0].toBoolean();
  }

  try_isAuthorizedSigner(signer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuthorizedSigner",
      "isAuthorizedSigner(address):(bool)",
      [ethereum.Value.fromAddress(signer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDefaultSigner(account: Address, signer: Address, role: Bytes): boolean {
    let result = super.call(
      "isDefaultSigner",
      "isDefaultSigner(address,address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role)
      ]
    );

    return result[0].toBoolean();
  }

  try_isDefaultSigner(
    account: Address,
    signer: Address,
    role: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDefaultSigner",
      "isDefaultSigner(address,address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isIndexedSigner(account: Address, signer: Address, role: Bytes): boolean {
    let result = super.call(
      "isIndexedSigner",
      "isIndexedSigner(address,address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role)
      ]
    );

    return result[0].toBoolean();
  }

  try_isIndexedSigner(
    account: Address,
    signer: Address,
    role: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isIndexedSigner",
      "isIndexedSigner(address,address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLegacyRole(role: Bytes): boolean {
    let result = super.call("isLegacyRole", "isLegacyRole(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBoolean();
  }

  try_isLegacyRole(role: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLegacyRole", "isLegacyRole(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(role)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLegacySigner(_account: Address, signer: Address, role: Bytes): boolean {
    let result = super.call(
      "isLegacySigner",
      "isLegacySigner(address,address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role)
      ]
    );

    return result[0].toBoolean();
  }

  try_isLegacySigner(
    _account: Address,
    signer: Address,
    role: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLegacySigner",
      "isLegacySigner(address,address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSigner(account: Address, signer: Address, role: Bytes): boolean {
    let result = super.call(
      "isSigner",
      "isSigner(address,address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role)
      ]
    );

    return result[0].toBoolean();
  }

  try_isSigner(
    account: Address,
    signer: Address,
    role: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSigner",
      "isSigner(address,address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromFixedBytes(role)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  offchainStorageRoots(param0: Address, param1: BigInt): Bytes {
    let result = super.call(
      "offchainStorageRoots",
      "offchainStorageRoots(address,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_offchainStorageRoots(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "offchainStorageRoots",
      "offchainStorageRoots(address,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signerToAccount(signer: Address): Address {
    let result = super.call(
      "signerToAccount",
      "signerToAccount(address):(address)",
      [ethereum.Value.fromAddress(signer)]
    );

    return result[0].toAddress();
  }

  try_signerToAccount(signer: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "signerToAccount",
      "signerToAccount(address):(address)",
      [ethereum.Value.fromAddress(signer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorSignerToAccount(signer: Address): Address {
    let result = super.call(
      "validatorSignerToAccount",
      "validatorSignerToAccount(address):(address)",
      [ethereum.Value.fromAddress(signer)]
    );

    return result[0].toAddress();
  }

  try_validatorSignerToAccount(signer: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorSignerToAccount",
      "validatorSignerToAccount(address):(address)",
      [ethereum.Value.fromAddress(signer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  voteSignerToAccount(signer: Address): Address {
    let result = super.call(
      "voteSignerToAccount",
      "voteSignerToAccount(address):(address)",
      [ethereum.Value.fromAddress(signer)]
    );

    return result[0].toAddress();
  }

  try_voteSignerToAccount(signer: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "voteSignerToAccount",
      "voteSignerToAccount(address):(address)",
      [ethereum.Value.fromAddress(signer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get test(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStorageRootCall extends ethereum.Call {
  get inputs(): AddStorageRootCall__Inputs {
    return new AddStorageRootCall__Inputs(this);
  }

  get outputs(): AddStorageRootCall__Outputs {
    return new AddStorageRootCall__Outputs(this);
  }
}

export class AddStorageRootCall__Inputs {
  _call: AddStorageRootCall;

  constructor(call: AddStorageRootCall) {
    this._call = call;
  }

  get url(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class AddStorageRootCall__Outputs {
  _call: AddStorageRootCall;

  constructor(call: AddStorageRootCall) {
    this._call = call;
  }
}

export class AuthorizeAttestationSignerCall extends ethereum.Call {
  get inputs(): AuthorizeAttestationSignerCall__Inputs {
    return new AuthorizeAttestationSignerCall__Inputs(this);
  }

  get outputs(): AuthorizeAttestationSignerCall__Outputs {
    return new AuthorizeAttestationSignerCall__Outputs(this);
  }
}

export class AuthorizeAttestationSignerCall__Inputs {
  _call: AuthorizeAttestationSignerCall;

  constructor(call: AuthorizeAttestationSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AuthorizeAttestationSignerCall__Outputs {
  _call: AuthorizeAttestationSignerCall;

  constructor(call: AuthorizeAttestationSignerCall) {
    this._call = call;
  }
}

export class AuthorizeSignerCall extends ethereum.Call {
  get inputs(): AuthorizeSignerCall__Inputs {
    return new AuthorizeSignerCall__Inputs(this);
  }

  get outputs(): AuthorizeSignerCall__Outputs {
    return new AuthorizeSignerCall__Outputs(this);
  }
}

export class AuthorizeSignerCall__Inputs {
  _call: AuthorizeSignerCall;

  constructor(call: AuthorizeSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AuthorizeSignerCall__Outputs {
  _call: AuthorizeSignerCall;

  constructor(call: AuthorizeSignerCall) {
    this._call = call;
  }
}

export class AuthorizeSignerWithSignatureCall extends ethereum.Call {
  get inputs(): AuthorizeSignerWithSignatureCall__Inputs {
    return new AuthorizeSignerWithSignatureCall__Inputs(this);
  }

  get outputs(): AuthorizeSignerWithSignatureCall__Outputs {
    return new AuthorizeSignerWithSignatureCall__Outputs(this);
  }
}

export class AuthorizeSignerWithSignatureCall__Inputs {
  _call: AuthorizeSignerWithSignatureCall;

  constructor(call: AuthorizeSignerWithSignatureCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AuthorizeSignerWithSignatureCall__Outputs {
  _call: AuthorizeSignerWithSignatureCall;

  constructor(call: AuthorizeSignerWithSignatureCall) {
    this._call = call;
  }
}

export class AuthorizeValidatorSignerCall extends ethereum.Call {
  get inputs(): AuthorizeValidatorSignerCall__Inputs {
    return new AuthorizeValidatorSignerCall__Inputs(this);
  }

  get outputs(): AuthorizeValidatorSignerCall__Outputs {
    return new AuthorizeValidatorSignerCall__Outputs(this);
  }
}

export class AuthorizeValidatorSignerCall__Inputs {
  _call: AuthorizeValidatorSignerCall;

  constructor(call: AuthorizeValidatorSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AuthorizeValidatorSignerCall__Outputs {
  _call: AuthorizeValidatorSignerCall;

  constructor(call: AuthorizeValidatorSignerCall) {
    this._call = call;
  }
}

export class AuthorizeValidatorSignerWithKeysCall extends ethereum.Call {
  get inputs(): AuthorizeValidatorSignerWithKeysCall__Inputs {
    return new AuthorizeValidatorSignerWithKeysCall__Inputs(this);
  }

  get outputs(): AuthorizeValidatorSignerWithKeysCall__Outputs {
    return new AuthorizeValidatorSignerWithKeysCall__Outputs(this);
  }
}

export class AuthorizeValidatorSignerWithKeysCall__Inputs {
  _call: AuthorizeValidatorSignerWithKeysCall;

  constructor(call: AuthorizeValidatorSignerWithKeysCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get ecdsaPublicKey(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get blsPublicKey(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get blsPop(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class AuthorizeValidatorSignerWithKeysCall__Outputs {
  _call: AuthorizeValidatorSignerWithKeysCall;

  constructor(call: AuthorizeValidatorSignerWithKeysCall) {
    this._call = call;
  }
}

export class AuthorizeValidatorSignerWithPublicKeyCall extends ethereum.Call {
  get inputs(): AuthorizeValidatorSignerWithPublicKeyCall__Inputs {
    return new AuthorizeValidatorSignerWithPublicKeyCall__Inputs(this);
  }

  get outputs(): AuthorizeValidatorSignerWithPublicKeyCall__Outputs {
    return new AuthorizeValidatorSignerWithPublicKeyCall__Outputs(this);
  }
}

export class AuthorizeValidatorSignerWithPublicKeyCall__Inputs {
  _call: AuthorizeValidatorSignerWithPublicKeyCall;

  constructor(call: AuthorizeValidatorSignerWithPublicKeyCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get ecdsaPublicKey(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AuthorizeValidatorSignerWithPublicKeyCall__Outputs {
  _call: AuthorizeValidatorSignerWithPublicKeyCall;

  constructor(call: AuthorizeValidatorSignerWithPublicKeyCall) {
    this._call = call;
  }
}

export class AuthorizeVoteSignerCall extends ethereum.Call {
  get inputs(): AuthorizeVoteSignerCall__Inputs {
    return new AuthorizeVoteSignerCall__Inputs(this);
  }

  get outputs(): AuthorizeVoteSignerCall__Outputs {
    return new AuthorizeVoteSignerCall__Outputs(this);
  }
}

export class AuthorizeVoteSignerCall__Inputs {
  _call: AuthorizeVoteSignerCall;

  constructor(call: AuthorizeVoteSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AuthorizeVoteSignerCall__Outputs {
  _call: AuthorizeVoteSignerCall;

  constructor(call: AuthorizeVoteSignerCall) {
    this._call = call;
  }
}

export class CompleteSignerAuthorizationCall extends ethereum.Call {
  get inputs(): CompleteSignerAuthorizationCall__Inputs {
    return new CompleteSignerAuthorizationCall__Inputs(this);
  }

  get outputs(): CompleteSignerAuthorizationCall__Outputs {
    return new CompleteSignerAuthorizationCall__Outputs(this);
  }
}

export class CompleteSignerAuthorizationCall__Inputs {
  _call: CompleteSignerAuthorizationCall;

  constructor(call: CompleteSignerAuthorizationCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CompleteSignerAuthorizationCall__Outputs {
  _call: CompleteSignerAuthorizationCall;

  constructor(call: CompleteSignerAuthorizationCall) {
    this._call = call;
  }
}

export class CreateAccountCall extends ethereum.Call {
  get inputs(): CreateAccountCall__Inputs {
    return new CreateAccountCall__Inputs(this);
  }

  get outputs(): CreateAccountCall__Outputs {
    return new CreateAccountCall__Outputs(this);
  }
}

export class CreateAccountCall__Inputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }
}

export class CreateAccountCall__Outputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveAttestationSignerCall extends ethereum.Call {
  get inputs(): RemoveAttestationSignerCall__Inputs {
    return new RemoveAttestationSignerCall__Inputs(this);
  }

  get outputs(): RemoveAttestationSignerCall__Outputs {
    return new RemoveAttestationSignerCall__Outputs(this);
  }
}

export class RemoveAttestationSignerCall__Inputs {
  _call: RemoveAttestationSignerCall;

  constructor(call: RemoveAttestationSignerCall) {
    this._call = call;
  }
}

export class RemoveAttestationSignerCall__Outputs {
  _call: RemoveAttestationSignerCall;

  constructor(call: RemoveAttestationSignerCall) {
    this._call = call;
  }
}

export class RemoveDefaultSignerCall extends ethereum.Call {
  get inputs(): RemoveDefaultSignerCall__Inputs {
    return new RemoveDefaultSignerCall__Inputs(this);
  }

  get outputs(): RemoveDefaultSignerCall__Outputs {
    return new RemoveDefaultSignerCall__Outputs(this);
  }
}

export class RemoveDefaultSignerCall__Inputs {
  _call: RemoveDefaultSignerCall;

  constructor(call: RemoveDefaultSignerCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveDefaultSignerCall__Outputs {
  _call: RemoveDefaultSignerCall;

  constructor(call: RemoveDefaultSignerCall) {
    this._call = call;
  }
}

export class RemoveIndexedSignerCall extends ethereum.Call {
  get inputs(): RemoveIndexedSignerCall__Inputs {
    return new RemoveIndexedSignerCall__Inputs(this);
  }

  get outputs(): RemoveIndexedSignerCall__Outputs {
    return new RemoveIndexedSignerCall__Outputs(this);
  }
}

export class RemoveIndexedSignerCall__Inputs {
  _call: RemoveIndexedSignerCall;

  constructor(call: RemoveIndexedSignerCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveIndexedSignerCall__Outputs {
  _call: RemoveIndexedSignerCall;

  constructor(call: RemoveIndexedSignerCall) {
    this._call = call;
  }
}

export class RemoveSignerCall extends ethereum.Call {
  get inputs(): RemoveSignerCall__Inputs {
    return new RemoveSignerCall__Inputs(this);
  }

  get outputs(): RemoveSignerCall__Outputs {
    return new RemoveSignerCall__Outputs(this);
  }
}

export class RemoveSignerCall__Inputs {
  _call: RemoveSignerCall;

  constructor(call: RemoveSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RemoveSignerCall__Outputs {
  _call: RemoveSignerCall;

  constructor(call: RemoveSignerCall) {
    this._call = call;
  }
}

export class RemoveStorageRootCall extends ethereum.Call {
  get inputs(): RemoveStorageRootCall__Inputs {
    return new RemoveStorageRootCall__Inputs(this);
  }

  get outputs(): RemoveStorageRootCall__Outputs {
    return new RemoveStorageRootCall__Outputs(this);
  }
}

export class RemoveStorageRootCall__Inputs {
  _call: RemoveStorageRootCall;

  constructor(call: RemoveStorageRootCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveStorageRootCall__Outputs {
  _call: RemoveStorageRootCall;

  constructor(call: RemoveStorageRootCall) {
    this._call = call;
  }
}

export class RemoveValidatorSignerCall extends ethereum.Call {
  get inputs(): RemoveValidatorSignerCall__Inputs {
    return new RemoveValidatorSignerCall__Inputs(this);
  }

  get outputs(): RemoveValidatorSignerCall__Outputs {
    return new RemoveValidatorSignerCall__Outputs(this);
  }
}

export class RemoveValidatorSignerCall__Inputs {
  _call: RemoveValidatorSignerCall;

  constructor(call: RemoveValidatorSignerCall) {
    this._call = call;
  }
}

export class RemoveValidatorSignerCall__Outputs {
  _call: RemoveValidatorSignerCall;

  constructor(call: RemoveValidatorSignerCall) {
    this._call = call;
  }
}

export class RemoveVoteSignerCall extends ethereum.Call {
  get inputs(): RemoveVoteSignerCall__Inputs {
    return new RemoveVoteSignerCall__Inputs(this);
  }

  get outputs(): RemoveVoteSignerCall__Outputs {
    return new RemoveVoteSignerCall__Outputs(this);
  }
}

export class RemoveVoteSignerCall__Inputs {
  _call: RemoveVoteSignerCall;

  constructor(call: RemoveVoteSignerCall) {
    this._call = call;
  }
}

export class RemoveVoteSignerCall__Outputs {
  _call: RemoveVoteSignerCall;

  constructor(call: RemoveVoteSignerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAccountCall extends ethereum.Call {
  get inputs(): SetAccountCall__Inputs {
    return new SetAccountCall__Inputs(this);
  }

  get outputs(): SetAccountCall__Outputs {
    return new SetAccountCall__Outputs(this);
  }
}

export class SetAccountCall__Inputs {
  _call: SetAccountCall;

  constructor(call: SetAccountCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get dataEncryptionKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get walletAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SetAccountCall__Outputs {
  _call: SetAccountCall;

  constructor(call: SetAccountCall) {
    this._call = call;
  }
}

export class SetAccountDataEncryptionKeyCall extends ethereum.Call {
  get inputs(): SetAccountDataEncryptionKeyCall__Inputs {
    return new SetAccountDataEncryptionKeyCall__Inputs(this);
  }

  get outputs(): SetAccountDataEncryptionKeyCall__Outputs {
    return new SetAccountDataEncryptionKeyCall__Outputs(this);
  }
}

export class SetAccountDataEncryptionKeyCall__Inputs {
  _call: SetAccountDataEncryptionKeyCall;

  constructor(call: SetAccountDataEncryptionKeyCall) {
    this._call = call;
  }

  get dataEncryptionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetAccountDataEncryptionKeyCall__Outputs {
  _call: SetAccountDataEncryptionKeyCall;

  constructor(call: SetAccountDataEncryptionKeyCall) {
    this._call = call;
  }
}

export class SetEip712DomainSeparatorCall extends ethereum.Call {
  get inputs(): SetEip712DomainSeparatorCall__Inputs {
    return new SetEip712DomainSeparatorCall__Inputs(this);
  }

  get outputs(): SetEip712DomainSeparatorCall__Outputs {
    return new SetEip712DomainSeparatorCall__Outputs(this);
  }
}

export class SetEip712DomainSeparatorCall__Inputs {
  _call: SetEip712DomainSeparatorCall;

  constructor(call: SetEip712DomainSeparatorCall) {
    this._call = call;
  }
}

export class SetEip712DomainSeparatorCall__Outputs {
  _call: SetEip712DomainSeparatorCall;

  constructor(call: SetEip712DomainSeparatorCall) {
    this._call = call;
  }
}

export class SetIndexedSignerCall extends ethereum.Call {
  get inputs(): SetIndexedSignerCall__Inputs {
    return new SetIndexedSignerCall__Inputs(this);
  }

  get outputs(): SetIndexedSignerCall__Outputs {
    return new SetIndexedSignerCall__Outputs(this);
  }
}

export class SetIndexedSignerCall__Inputs {
  _call: SetIndexedSignerCall;

  constructor(call: SetIndexedSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetIndexedSignerCall__Outputs {
  _call: SetIndexedSignerCall;

  constructor(call: SetIndexedSignerCall) {
    this._call = call;
  }
}

export class SetMetadataURLCall extends ethereum.Call {
  get inputs(): SetMetadataURLCall__Inputs {
    return new SetMetadataURLCall__Inputs(this);
  }

  get outputs(): SetMetadataURLCall__Outputs {
    return new SetMetadataURLCall__Outputs(this);
  }
}

export class SetMetadataURLCall__Inputs {
  _call: SetMetadataURLCall;

  constructor(call: SetMetadataURLCall) {
    this._call = call;
  }

  get metadataURL(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetMetadataURLCall__Outputs {
  _call: SetMetadataURLCall;

  constructor(call: SetMetadataURLCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetRegistryCall extends ethereum.Call {
  get inputs(): SetRegistryCall__Inputs {
    return new SetRegistryCall__Inputs(this);
  }

  get outputs(): SetRegistryCall__Outputs {
    return new SetRegistryCall__Outputs(this);
  }
}

export class SetRegistryCall__Inputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }

  get registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRegistryCall__Outputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }
}

export class SetWalletAddressCall extends ethereum.Call {
  get inputs(): SetWalletAddressCall__Inputs {
    return new SetWalletAddressCall__Inputs(this);
  }

  get outputs(): SetWalletAddressCall__Outputs {
    return new SetWalletAddressCall__Outputs(this);
  }
}

export class SetWalletAddressCall__Inputs {
  _call: SetWalletAddressCall;

  constructor(call: SetWalletAddressCall) {
    this._call = call;
  }

  get walletAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SetWalletAddressCall__Outputs {
  _call: SetWalletAddressCall;

  constructor(call: SetWalletAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
