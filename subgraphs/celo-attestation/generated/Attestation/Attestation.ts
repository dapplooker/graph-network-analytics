// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AttestationCompleted extends ethereum.Event {
  get params(): AttestationCompleted__Params {
    return new AttestationCompleted__Params(this);
  }
}

export class AttestationCompleted__Params {
  _event: AttestationCompleted;

  constructor(event: AttestationCompleted) {
    this._event = event;
  }

  get identifier(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get issuer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AttestationExpiryBlocksSet extends ethereum.Event {
  get params(): AttestationExpiryBlocksSet__Params {
    return new AttestationExpiryBlocksSet__Params(this);
  }
}

export class AttestationExpiryBlocksSet__Params {
  _event: AttestationExpiryBlocksSet;

  constructor(event: AttestationExpiryBlocksSet) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AttestationIssuerSelected extends ethereum.Event {
  get params(): AttestationIssuerSelected__Params {
    return new AttestationIssuerSelected__Params(this);
  }
}

export class AttestationIssuerSelected__Params {
  _event: AttestationIssuerSelected;

  constructor(event: AttestationIssuerSelected) {
    this._event = event;
  }

  get identifier(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get issuer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get attestationRequestFeeToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class AttestationRequestFeeSet extends ethereum.Event {
  get params(): AttestationRequestFeeSet__Params {
    return new AttestationRequestFeeSet__Params(this);
  }
}

export class AttestationRequestFeeSet__Params {
  _event: AttestationRequestFeeSet;

  constructor(event: AttestationRequestFeeSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AttestationsRequested extends ethereum.Event {
  get params(): AttestationsRequested__Params {
    return new AttestationsRequested__Params(this);
  }
}

export class AttestationsRequested__Params {
  _event: AttestationsRequested;

  constructor(event: AttestationsRequested) {
    this._event = event;
  }

  get identifier(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get attestationsRequested(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get attestationRequestFeeToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class AttestationsTransferred extends ethereum.Event {
  get params(): AttestationsTransferred__Params {
    return new AttestationsTransferred__Params(this);
  }
}

export class AttestationsTransferred__Params {
  _event: AttestationsTransferred;

  constructor(event: AttestationsTransferred) {
    this._event = event;
  }

  get identifier(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fromAccount(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toAccount(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MaxAttestationsSet extends ethereum.Event {
  get params(): MaxAttestationsSet__Params {
    return new MaxAttestationsSet__Params(this);
  }
}

export class MaxAttestationsSet__Params {
  _event: MaxAttestationsSet;

  constructor(event: MaxAttestationsSet) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RegistrySet extends ethereum.Event {
  get params(): RegistrySet__Params {
    return new RegistrySet__Params(this);
  }
}

export class RegistrySet__Params {
  _event: RegistrySet;

  constructor(event: RegistrySet) {
    this._event = event;
  }

  get registryAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SelectIssuersWaitBlocksSet extends ethereum.Event {
  get params(): SelectIssuersWaitBlocksSet__Params {
    return new SelectIssuersWaitBlocksSet__Params(this);
  }
}

export class SelectIssuersWaitBlocksSet__Params {
  _event: SelectIssuersWaitBlocksSet;

  constructor(event: SelectIssuersWaitBlocksSet) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransferApproval extends ethereum.Event {
  get params(): TransferApproval__Params {
    return new TransferApproval__Params(this);
  }
}

export class TransferApproval__Params {
  _event: TransferApproval;

  constructor(event: TransferApproval) {
    this._event = event;
  }

  get approver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get indentifier(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Attestation__batchGetAttestationStatsResult {
  value0: Array<BigInt>;
  value1: Array<Address>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<Address>,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<Address> {
    return this.value1;
  }

  getValue2(): Array<BigInt> {
    return this.value2;
  }

  getValue3(): Array<BigInt> {
    return this.value3;
  }
}

export class Attestation__fractionMulExpResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Attestation__getAttestationStateResult {
  value0: i32;
  value1: BigInt;
  value2: Address;

  constructor(value0: i32, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): Address {
    return this.value2;
  }
}

export class Attestation__getAttestationStatsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Attestation__getCompletableAttestationsResult {
  value0: Array<BigInt>;
  value1: Array<Address>;
  value2: Array<BigInt>;
  value3: Bytes;

  constructor(
    value0: Array<BigInt>,
    value1: Array<Address>,
    value2: Array<BigInt>,
    value3: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<Address> {
    return this.value1;
  }

  getValue2(): Array<BigInt> {
    return this.value2;
  }

  getValue3(): Bytes {
    return this.value3;
  }
}

export class Attestation__getUnselectedRequestResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;

  constructor(value0: BigInt, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): Address {
    return this.value2;
  }
}

export class Attestation__getVersionNumberResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class Attestation extends ethereum.SmartContract {
  static bind(address: Address): Attestation {
    return new Attestation("Attestation", address);
  }

  attestationExpiryBlocks(): BigInt {
    let result = super.call(
      "attestationExpiryBlocks",
      "attestationExpiryBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_attestationExpiryBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "attestationExpiryBlocks",
      "attestationExpiryBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  attestationRequestFees(param0: Address): BigInt {
    let result = super.call(
      "attestationRequestFees",
      "attestationRequestFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_attestationRequestFees(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "attestationRequestFees",
      "attestationRequestFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchGetAttestationStats(
    identifiersToLookup: Array<Bytes>
  ): Attestation__batchGetAttestationStatsResult {
    let result = super.call(
      "batchGetAttestationStats",
      "batchGetAttestationStats(bytes32[]):(uint256[],address[],uint64[],uint64[])",
      [ethereum.Value.fromFixedBytesArray(identifiersToLookup)]
    );

    return new Attestation__batchGetAttestationStatsResult(
      result[0].toBigIntArray(),
      result[1].toAddressArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    );
  }

  try_batchGetAttestationStats(
    identifiersToLookup: Array<Bytes>
  ): ethereum.CallResult<Attestation__batchGetAttestationStatsResult> {
    let result = super.tryCall(
      "batchGetAttestationStats",
      "batchGetAttestationStats(bytes32[]):(uint256[],address[],uint64[],uint64[])",
      [ethereum.Value.fromFixedBytesArray(identifiersToLookup)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Attestation__batchGetAttestationStatsResult(
        value[0].toBigIntArray(),
        value[1].toAddressArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      )
    );
  }

  checkProofOfPossession(
    sender: Address,
    blsKey: Bytes,
    blsPop: Bytes
  ): boolean {
    let result = super.call(
      "checkProofOfPossession",
      "checkProofOfPossession(address,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromBytes(blsKey),
        ethereum.Value.fromBytes(blsPop)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkProofOfPossession(
    sender: Address,
    blsKey: Bytes,
    blsPop: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkProofOfPossession",
      "checkProofOfPossession(address,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromBytes(blsKey),
        ethereum.Value.fromBytes(blsPop)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fractionMulExp(
    aNumerator: BigInt,
    aDenominator: BigInt,
    bNumerator: BigInt,
    bDenominator: BigInt,
    exponent: BigInt,
    _decimals: BigInt
  ): Attestation__fractionMulExpResult {
    let result = super.call(
      "fractionMulExp",
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(aNumerator),
        ethereum.Value.fromUnsignedBigInt(aDenominator),
        ethereum.Value.fromUnsignedBigInt(bNumerator),
        ethereum.Value.fromUnsignedBigInt(bDenominator),
        ethereum.Value.fromUnsignedBigInt(exponent),
        ethereum.Value.fromUnsignedBigInt(_decimals)
      ]
    );

    return new Attestation__fractionMulExpResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_fractionMulExp(
    aNumerator: BigInt,
    aDenominator: BigInt,
    bNumerator: BigInt,
    bDenominator: BigInt,
    exponent: BigInt,
    _decimals: BigInt
  ): ethereum.CallResult<Attestation__fractionMulExpResult> {
    let result = super.tryCall(
      "fractionMulExp",
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(aNumerator),
        ethereum.Value.fromUnsignedBigInt(aDenominator),
        ethereum.Value.fromUnsignedBigInt(bNumerator),
        ethereum.Value.fromUnsignedBigInt(bDenominator),
        ethereum.Value.fromUnsignedBigInt(exponent),
        ethereum.Value.fromUnsignedBigInt(_decimals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Attestation__fractionMulExpResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getAttestationIssuers(identifier: Bytes, account: Address): Array<Address> {
    let result = super.call(
      "getAttestationIssuers",
      "getAttestationIssuers(bytes32,address):(address[])",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getAttestationIssuers(
    identifier: Bytes,
    account: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAttestationIssuers",
      "getAttestationIssuers(bytes32,address):(address[])",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAttestationRequestFee(token: Address): BigInt {
    let result = super.call(
      "getAttestationRequestFee",
      "getAttestationRequestFee(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getAttestationRequestFee(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAttestationRequestFee",
      "getAttestationRequestFee(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAttestationState(
    identifier: Bytes,
    account: Address,
    issuer: Address
  ): Attestation__getAttestationStateResult {
    let result = super.call(
      "getAttestationState",
      "getAttestationState(bytes32,address,address):(uint8,uint32,address)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(issuer)
      ]
    );

    return new Attestation__getAttestationStateResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_getAttestationState(
    identifier: Bytes,
    account: Address,
    issuer: Address
  ): ethereum.CallResult<Attestation__getAttestationStateResult> {
    let result = super.tryCall(
      "getAttestationState",
      "getAttestationState(bytes32,address,address):(uint8,uint32,address)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(issuer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Attestation__getAttestationStateResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  getAttestationStats(
    identifier: Bytes,
    account: Address
  ): Attestation__getAttestationStatsResult {
    let result = super.call(
      "getAttestationStats",
      "getAttestationStats(bytes32,address):(uint32,uint32)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account)
      ]
    );

    return new Attestation__getAttestationStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAttestationStats(
    identifier: Bytes,
    account: Address
  ): ethereum.CallResult<Attestation__getAttestationStatsResult> {
    let result = super.tryCall(
      "getAttestationStats",
      "getAttestationStats(bytes32,address):(uint32,uint32)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Attestation__getAttestationStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getBlockNumberFromHeader(header: Bytes): BigInt {
    let result = super.call(
      "getBlockNumberFromHeader",
      "getBlockNumberFromHeader(bytes):(uint256)",
      [ethereum.Value.fromBytes(header)]
    );

    return result[0].toBigInt();
  }

  try_getBlockNumberFromHeader(header: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockNumberFromHeader",
      "getBlockNumberFromHeader(bytes):(uint256)",
      [ethereum.Value.fromBytes(header)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCompletableAttestations(
    identifier: Bytes,
    account: Address
  ): Attestation__getCompletableAttestationsResult {
    let result = super.call(
      "getCompletableAttestations",
      "getCompletableAttestations(bytes32,address):(uint32[],address[],uint256[],bytes)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account)
      ]
    );

    return new Attestation__getCompletableAttestationsResult(
      result[0].toBigIntArray(),
      result[1].toAddressArray(),
      result[2].toBigIntArray(),
      result[3].toBytes()
    );
  }

  try_getCompletableAttestations(
    identifier: Bytes,
    account: Address
  ): ethereum.CallResult<Attestation__getCompletableAttestationsResult> {
    let result = super.tryCall(
      "getCompletableAttestations",
      "getCompletableAttestations(bytes32,address):(uint32[],address[],uint256[],bytes)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Attestation__getCompletableAttestationsResult(
        value[0].toBigIntArray(),
        value[1].toAddressArray(),
        value[2].toBigIntArray(),
        value[3].toBytes()
      )
    );
  }

  getEpochNumber(): BigInt {
    let result = super.call("getEpochNumber", "getEpochNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getEpochNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochNumber",
      "getEpochNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochNumberOfBlock(blockNumber: BigInt): BigInt {
    let result = super.call(
      "getEpochNumberOfBlock",
      "getEpochNumberOfBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_getEpochNumberOfBlock(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochNumberOfBlock",
      "getEpochNumberOfBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochSize(): BigInt {
    let result = super.call("getEpochSize", "getEpochSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getEpochSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEpochSize", "getEpochSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxAttestations(): BigInt {
    let result = super.call(
      "getMaxAttestations",
      "getMaxAttestations():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxAttestations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxAttestations",
      "getMaxAttestations():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getParentSealBitmap(blockNumber: BigInt): Bytes {
    let result = super.call(
      "getParentSealBitmap",
      "getParentSealBitmap(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBytes();
  }

  try_getParentSealBitmap(blockNumber: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getParentSealBitmap",
      "getParentSealBitmap(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUnselectedRequest(
    identifier: Bytes,
    account: Address
  ): Attestation__getUnselectedRequestResult {
    let result = super.call(
      "getUnselectedRequest",
      "getUnselectedRequest(bytes32,address):(uint32,uint32,address)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account)
      ]
    );

    return new Attestation__getUnselectedRequestResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_getUnselectedRequest(
    identifier: Bytes,
    account: Address
  ): ethereum.CallResult<Attestation__getUnselectedRequestResult> {
    let result = super.tryCall(
      "getUnselectedRequest",
      "getUnselectedRequest(bytes32,address):(uint32,uint32,address)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Attestation__getUnselectedRequestResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  getVerifiedSealBitmapFromHeader(header: Bytes): Bytes {
    let result = super.call(
      "getVerifiedSealBitmapFromHeader",
      "getVerifiedSealBitmapFromHeader(bytes):(bytes32)",
      [ethereum.Value.fromBytes(header)]
    );

    return result[0].toBytes();
  }

  try_getVerifiedSealBitmapFromHeader(
    header: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getVerifiedSealBitmapFromHeader",
      "getVerifiedSealBitmapFromHeader(bytes):(bytes32)",
      [ethereum.Value.fromBytes(header)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getVersionNumber(): Attestation__getVersionNumberResult {
    let result = super.call(
      "getVersionNumber",
      "getVersionNumber():(uint256,uint256,uint256,uint256)",
      []
    );

    return new Attestation__getVersionNumberResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getVersionNumber(): ethereum.CallResult<
    Attestation__getVersionNumberResult
  > {
    let result = super.tryCall(
      "getVersionNumber",
      "getVersionNumber():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Attestation__getVersionNumberResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  hashHeader(header: Bytes): Bytes {
    let result = super.call("hashHeader", "hashHeader(bytes):(bytes32)", [
      ethereum.Value.fromBytes(header)
    ]);

    return result[0].toBytes();
  }

  try_hashHeader(header: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashHeader", "hashHeader(bytes):(bytes32)", [
      ethereum.Value.fromBytes(header)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lookupAccountsForIdentifier(identifier: Bytes): Array<Address> {
    let result = super.call(
      "lookupAccountsForIdentifier",
      "lookupAccountsForIdentifier(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(identifier)]
    );

    return result[0].toAddressArray();
  }

  try_lookupAccountsForIdentifier(
    identifier: Bytes
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "lookupAccountsForIdentifier",
      "lookupAccountsForIdentifier(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(identifier)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  maxAttestations(): BigInt {
    let result = super.call(
      "maxAttestations",
      "maxAttestations():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxAttestations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxAttestations",
      "maxAttestations():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minQuorumSize(blockNumber: BigInt): BigInt {
    let result = super.call(
      "minQuorumSize",
      "minQuorumSize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_minQuorumSize(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minQuorumSize",
      "minQuorumSize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minQuorumSizeInCurrentSet(): BigInt {
    let result = super.call(
      "minQuorumSizeInCurrentSet",
      "minQuorumSizeInCurrentSet():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minQuorumSizeInCurrentSet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minQuorumSizeInCurrentSet",
      "minQuorumSizeInCurrentSet():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberValidatorsInCurrentSet(): BigInt {
    let result = super.call(
      "numberValidatorsInCurrentSet",
      "numberValidatorsInCurrentSet():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberValidatorsInCurrentSet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberValidatorsInCurrentSet",
      "numberValidatorsInCurrentSet():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberValidatorsInSet(blockNumber: BigInt): BigInt {
    let result = super.call(
      "numberValidatorsInSet",
      "numberValidatorsInSet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_numberValidatorsInSet(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberValidatorsInSet",
      "numberValidatorsInSet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingWithdrawals(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "pendingWithdrawals",
      "pendingWithdrawals(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_pendingWithdrawals(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingWithdrawals",
      "pendingWithdrawals(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  selectIssuersWaitBlocks(): BigInt {
    let result = super.call(
      "selectIssuersWaitBlocks",
      "selectIssuersWaitBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_selectIssuersWaitBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "selectIssuersWaitBlocks",
      "selectIssuersWaitBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferApprovals(param0: Address, param1: Bytes): boolean {
    let result = super.call(
      "transferApprovals",
      "transferApprovals(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferApprovals(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferApprovals",
      "transferApprovals(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validateAttestationCode(
    identifier: Bytes,
    account: Address,
    v: i32,
    r: Bytes,
    s: Bytes
  ): Address {
    let result = super.call(
      "validateAttestationCode",
      "validateAttestationCode(bytes32,address,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toAddress();
  }

  try_validateAttestationCode(
    identifier: Bytes,
    account: Address,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validateAttestationCode",
      "validateAttestationCode(bytes32,address,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorSignerAddressFromCurrentSet(index: BigInt): Address {
    let result = super.call(
      "validatorSignerAddressFromCurrentSet",
      "validatorSignerAddressFromCurrentSet(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_validatorSignerAddressFromCurrentSet(
    index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorSignerAddressFromCurrentSet",
      "validatorSignerAddressFromCurrentSet(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorSignerAddressFromSet(index: BigInt, blockNumber: BigInt): Address {
    let result = super.call(
      "validatorSignerAddressFromSet",
      "validatorSignerAddressFromSet(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toAddress();
  }

  try_validatorSignerAddressFromSet(
    index: BigInt,
    blockNumber: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorSignerAddressFromSet",
      "validatorSignerAddressFromSet(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get test(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveTransferCall extends ethereum.Call {
  get inputs(): ApproveTransferCall__Inputs {
    return new ApproveTransferCall__Inputs(this);
  }

  get outputs(): ApproveTransferCall__Outputs {
    return new ApproveTransferCall__Outputs(this);
  }
}

export class ApproveTransferCall__Inputs {
  _call: ApproveTransferCall;

  constructor(call: ApproveTransferCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class ApproveTransferCall__Outputs {
  _call: ApproveTransferCall;

  constructor(call: ApproveTransferCall) {
    this._call = call;
  }
}

export class CompleteCall extends ethereum.Call {
  get inputs(): CompleteCall__Inputs {
    return new CompleteCall__Inputs(this);
  }

  get outputs(): CompleteCall__Outputs {
    return new CompleteCall__Outputs(this);
  }
}

export class CompleteCall__Inputs {
  _call: CompleteCall;

  constructor(call: CompleteCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CompleteCall__Outputs {
  _call: CompleteCall;

  constructor(call: CompleteCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _attestationExpiryBlocks(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _selectIssuersWaitBlocks(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxAttestations(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get attestationRequestFeeTokens(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get attestationRequestFeeValues(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestCall extends ethereum.Call {
  get inputs(): RequestCall__Inputs {
    return new RequestCall__Inputs(this);
  }

  get outputs(): RequestCall__Outputs {
    return new RequestCall__Outputs(this);
  }
}

export class RequestCall__Inputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get attestationsRequested(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get attestationRequestFeeToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RequestCall__Outputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class SelectIssuersCall extends ethereum.Call {
  get inputs(): SelectIssuersCall__Inputs {
    return new SelectIssuersCall__Inputs(this);
  }

  get outputs(): SelectIssuersCall__Outputs {
    return new SelectIssuersCall__Outputs(this);
  }
}

export class SelectIssuersCall__Inputs {
  _call: SelectIssuersCall;

  constructor(call: SelectIssuersCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SelectIssuersCall__Outputs {
  _call: SelectIssuersCall;

  constructor(call: SelectIssuersCall) {
    this._call = call;
  }
}

export class SetAttestationExpiryBlocksCall extends ethereum.Call {
  get inputs(): SetAttestationExpiryBlocksCall__Inputs {
    return new SetAttestationExpiryBlocksCall__Inputs(this);
  }

  get outputs(): SetAttestationExpiryBlocksCall__Outputs {
    return new SetAttestationExpiryBlocksCall__Outputs(this);
  }
}

export class SetAttestationExpiryBlocksCall__Inputs {
  _call: SetAttestationExpiryBlocksCall;

  constructor(call: SetAttestationExpiryBlocksCall) {
    this._call = call;
  }

  get _attestationExpiryBlocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAttestationExpiryBlocksCall__Outputs {
  _call: SetAttestationExpiryBlocksCall;

  constructor(call: SetAttestationExpiryBlocksCall) {
    this._call = call;
  }
}

export class SetAttestationRequestFeeCall extends ethereum.Call {
  get inputs(): SetAttestationRequestFeeCall__Inputs {
    return new SetAttestationRequestFeeCall__Inputs(this);
  }

  get outputs(): SetAttestationRequestFeeCall__Outputs {
    return new SetAttestationRequestFeeCall__Outputs(this);
  }
}

export class SetAttestationRequestFeeCall__Inputs {
  _call: SetAttestationRequestFeeCall;

  constructor(call: SetAttestationRequestFeeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAttestationRequestFeeCall__Outputs {
  _call: SetAttestationRequestFeeCall;

  constructor(call: SetAttestationRequestFeeCall) {
    this._call = call;
  }
}

export class SetMaxAttestationsCall extends ethereum.Call {
  get inputs(): SetMaxAttestationsCall__Inputs {
    return new SetMaxAttestationsCall__Inputs(this);
  }

  get outputs(): SetMaxAttestationsCall__Outputs {
    return new SetMaxAttestationsCall__Outputs(this);
  }
}

export class SetMaxAttestationsCall__Inputs {
  _call: SetMaxAttestationsCall;

  constructor(call: SetMaxAttestationsCall) {
    this._call = call;
  }

  get _maxAttestations(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxAttestationsCall__Outputs {
  _call: SetMaxAttestationsCall;

  constructor(call: SetMaxAttestationsCall) {
    this._call = call;
  }
}

export class SetRegistryCall extends ethereum.Call {
  get inputs(): SetRegistryCall__Inputs {
    return new SetRegistryCall__Inputs(this);
  }

  get outputs(): SetRegistryCall__Outputs {
    return new SetRegistryCall__Outputs(this);
  }
}

export class SetRegistryCall__Inputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }

  get registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRegistryCall__Outputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }
}

export class SetSelectIssuersWaitBlocksCall extends ethereum.Call {
  get inputs(): SetSelectIssuersWaitBlocksCall__Inputs {
    return new SetSelectIssuersWaitBlocksCall__Inputs(this);
  }

  get outputs(): SetSelectIssuersWaitBlocksCall__Outputs {
    return new SetSelectIssuersWaitBlocksCall__Outputs(this);
  }
}

export class SetSelectIssuersWaitBlocksCall__Inputs {
  _call: SetSelectIssuersWaitBlocksCall;

  constructor(call: SetSelectIssuersWaitBlocksCall) {
    this._call = call;
  }

  get _selectIssuersWaitBlocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSelectIssuersWaitBlocksCall__Outputs {
  _call: SetSelectIssuersWaitBlocksCall;

  constructor(call: SetSelectIssuersWaitBlocksCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
