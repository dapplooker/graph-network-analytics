// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssetAdded extends ethereum.Event {
  get params(): AssetAdded__Params {
    return new AssetAdded__Params(this);
  }
}

export class AssetAdded__Params {
  _event: AssetAdded;

  constructor(event: AssetAdded) {
    this._event = event;
  }

  get assetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetGasLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AsyncDefiBridgeProcessed extends ethereum.Event {
  get params(): AsyncDefiBridgeProcessed__Params {
    return new AsyncDefiBridgeProcessed__Params(this);
  }
}

export class AsyncDefiBridgeProcessed__Params {
  _event: AsyncDefiBridgeProcessed;

  constructor(event: AsyncDefiBridgeProcessed) {
    this._event = event;
  }

  get bridgeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalInputValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BridgeAdded extends ethereum.Event {
  get params(): BridgeAdded__Params {
    return new BridgeAdded__Params(this);
  }
}

export class BridgeAdded__Params {
  _event: BridgeAdded;

  constructor(event: BridgeAdded) {
    this._event = event;
  }

  get bridgeAddressId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bridgeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bridgeGasLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DefiBridgeProcessed extends ethereum.Event {
  get params(): DefiBridgeProcessed__Params {
    return new DefiBridgeProcessed__Params(this);
  }
}

export class DefiBridgeProcessed__Params {
  _event: DefiBridgeProcessed;

  constructor(event: DefiBridgeProcessed) {
    this._event = event;
  }

  get bridgeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalInputValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalOutputValueA(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalOutputValueB(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get result(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get errorReason(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get assetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get depositorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get depositValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OffchainData extends ethereum.Event {
  get params(): OffchainData__Params {
    return new OffchainData__Params(this);
  }
}

export class OffchainData__Params {
  _event: OffchainData;

  constructor(event: OffchainData) {
    this._event = event;
  }

  get rollupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get chunk(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalChunks(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RollupProcessed extends ethereum.Event {
  get params(): RollupProcessed__Params {
    return new RollupProcessed__Params(this);
  }
}

export class RollupProcessed__Params {
  _event: RollupProcessed;

  constructor(event: RollupProcessed) {
    this._event = event;
  }

  get rollupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nextExpectedDefiHashes(): Array<Bytes> {
    return this._event.parameters[1].value.toBytesArray();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RollupProviderUpdated extends ethereum.Event {
  get params(): RollupProviderUpdated__Params {
    return new RollupProviderUpdated__Params(this);
  }
}

export class RollupProviderUpdated__Params {
  _event: RollupProviderUpdated;

  constructor(event: RollupProviderUpdated) {
    this._event = event;
  }

  get providerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get valid(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class VerifierUpdated extends ethereum.Event {
  get params(): VerifierUpdated__Params {
    return new VerifierUpdated__Params(this);
  }
}

export class VerifierUpdated__Params {
  _event: VerifierUpdated;

  constructor(event: VerifierUpdated) {
    this._event = event;
  }

  get verifierAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawError extends ethereum.Event {
  get params(): WithdrawError__Params {
    return new WithdrawError__Params(this);
  }
}

export class WithdrawError__Params {
  _event: WithdrawError;

  constructor(event: WithdrawError) {
    this._event = event;
  }

  get errorReason(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RP___getEscapeHatchStatusResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class RP___getSupportedAssetsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class RP___getSupportedBridgesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class RP___pendingDefiInteractionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getBridgeId(): BigInt {
    return this.value0;
  }

  getTotalInputValue(): BigInt {
    return this.value1;
  }
}

export class RP_ extends ethereum.SmartContract {
  static bind(address: Address): RP_ {
    return new RP_("RP_", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EMERGENCY_ROLE(): Bytes {
    let result = super.call("EMERGENCY_ROLE", "EMERGENCY_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_EMERGENCY_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EMERGENCY_ROLE",
      "EMERGENCY_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OWNER_ROLE(): Bytes {
    let result = super.call("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OWNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowThirdPartyContracts(): boolean {
    let result = super.call(
      "allowThirdPartyContracts",
      "allowThirdPartyContracts():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_allowThirdPartyContracts(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowThirdPartyContracts",
      "allowThirdPartyContracts():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assetGasLimits(param0: BigInt): BigInt {
    let result = super.call(
      "assetGasLimits",
      "assetGasLimits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_assetGasLimits(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetGasLimits",
      "assetGasLimits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  asyncDefiInteractionHashes(param0: BigInt): Bytes {
    let result = super.call(
      "asyncDefiInteractionHashes",
      "asyncDefiInteractionHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_asyncDefiInteractionHashes(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "asyncDefiInteractionHashes",
      "asyncDefiInteractionHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bridgeGasLimits(param0: BigInt): BigInt {
    let result = super.call(
      "bridgeGasLimits",
      "bridgeGasLimits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_bridgeGasLimits(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bridgeGasLimits",
      "bridgeGasLimits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defiBridgeProxy(): Address {
    let result = super.call(
      "defiBridgeProxy",
      "defiBridgeProxy():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_defiBridgeProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defiBridgeProxy",
      "defiBridgeProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defiInteractionHashes(param0: BigInt): Bytes {
    let result = super.call(
      "defiInteractionHashes",
      "defiInteractionHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_defiInteractionHashes(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "defiInteractionHashes",
      "defiInteractionHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  depositProofApprovals(param0: Address, param1: Bytes): boolean {
    let result = super.call(
      "depositProofApprovals",
      "depositProofApprovals(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_depositProofApprovals(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "depositProofApprovals",
      "depositProofApprovals(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  escapeBlockLowerBound(): BigInt {
    let result = super.call(
      "escapeBlockLowerBound",
      "escapeBlockLowerBound():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_escapeBlockLowerBound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "escapeBlockLowerBound",
      "escapeBlockLowerBound():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  escapeBlockUpperBound(): BigInt {
    let result = super.call(
      "escapeBlockUpperBound",
      "escapeBlockUpperBound():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_escapeBlockUpperBound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "escapeBlockUpperBound",
      "escapeBlockUpperBound():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ethPayments(param0: BigInt): BigInt {
    let result = super.call("ethPayments", "ethPayments(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ethPayments(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ethPayments",
      "ethPayments(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAsyncDefiInteractionHashes(): Array<Bytes> {
    let result = super.call(
      "getAsyncDefiInteractionHashes",
      "getAsyncDefiInteractionHashes():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getAsyncDefiInteractionHashes(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAsyncDefiInteractionHashes",
      "getAsyncDefiInteractionHashes():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAsyncDefiInteractionHashesLength(): BigInt {
    let result = super.call(
      "getAsyncDefiInteractionHashesLength",
      "getAsyncDefiInteractionHashesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAsyncDefiInteractionHashesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAsyncDefiInteractionHashesLength",
      "getAsyncDefiInteractionHashesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBridgeGasLimit(bridgeAddressId: BigInt): BigInt {
    let result = super.call(
      "getBridgeGasLimit",
      "getBridgeGasLimit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bridgeAddressId)]
    );

    return result[0].toBigInt();
  }

  try_getBridgeGasLimit(bridgeAddressId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBridgeGasLimit",
      "getBridgeGasLimit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bridgeAddressId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDataSize(): BigInt {
    let result = super.call("getDataSize", "getDataSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getDataSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDataSize", "getDataSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDefiInteractionHashes(): Array<Bytes> {
    let result = super.call(
      "getDefiInteractionHashes",
      "getDefiInteractionHashes():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getDefiInteractionHashes(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDefiInteractionHashes",
      "getDefiInteractionHashes():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDefiInteractionHashesLength(): BigInt {
    let result = super.call(
      "getDefiInteractionHashesLength",
      "getDefiInteractionHashesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDefiInteractionHashesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDefiInteractionHashesLength",
      "getDefiInteractionHashesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEscapeHatchStatus(): RP___getEscapeHatchStatusResult {
    let result = super.call(
      "getEscapeHatchStatus",
      "getEscapeHatchStatus():(bool,uint256)",
      []
    );

    return new RP___getEscapeHatchStatusResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getEscapeHatchStatus(): ethereum.CallResult<
    RP___getEscapeHatchStatusResult
  > {
    let result = super.tryCall(
      "getEscapeHatchStatus",
      "getEscapeHatchStatus():(bool,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RP___getEscapeHatchStatusResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getImplementationVersion(): i32 {
    let result = super.call(
      "getImplementationVersion",
      "getImplementationVersion():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getImplementationVersion(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getImplementationVersion",
      "getImplementationVersion():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getPendingDefiInteractionHashesLength(): BigInt {
    let result = super.call(
      "getPendingDefiInteractionHashesLength",
      "getPendingDefiInteractionHashesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingDefiInteractionHashesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingDefiInteractionHashesLength",
      "getPendingDefiInteractionHashesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSupportedAsset(assetId: BigInt): Address {
    let result = super.call(
      "getSupportedAsset",
      "getSupportedAsset(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );

    return result[0].toAddress();
  }

  try_getSupportedAsset(assetId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSupportedAsset",
      "getSupportedAsset(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSupportedAssets(): RP___getSupportedAssetsResult {
    let result = super.call(
      "getSupportedAssets",
      "getSupportedAssets():(address[],uint256[])",
      []
    );

    return new RP___getSupportedAssetsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getSupportedAssets(): ethereum.CallResult<RP___getSupportedAssetsResult> {
    let result = super.tryCall(
      "getSupportedAssets",
      "getSupportedAssets():(address[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RP___getSupportedAssetsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getSupportedAssetsLength(): BigInt {
    let result = super.call(
      "getSupportedAssetsLength",
      "getSupportedAssetsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSupportedAssetsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSupportedAssetsLength",
      "getSupportedAssetsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSupportedBridge(bridgeAddressId: BigInt): Address {
    let result = super.call(
      "getSupportedBridge",
      "getSupportedBridge(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(bridgeAddressId)]
    );

    return result[0].toAddress();
  }

  try_getSupportedBridge(
    bridgeAddressId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSupportedBridge",
      "getSupportedBridge(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(bridgeAddressId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSupportedBridges(): RP___getSupportedBridgesResult {
    let result = super.call(
      "getSupportedBridges",
      "getSupportedBridges():(address[],uint256[])",
      []
    );

    return new RP___getSupportedBridgesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getSupportedBridges(): ethereum.CallResult<
    RP___getSupportedBridgesResult
  > {
    let result = super.tryCall(
      "getSupportedBridges",
      "getSupportedBridges():(address[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RP___getSupportedBridgesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getSupportedBridgesLength(): BigInt {
    let result = super.call(
      "getSupportedBridgesLength",
      "getSupportedBridgesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSupportedBridgesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSupportedBridgesLength",
      "getSupportedBridgesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingDefiInteractions(param0: BigInt): RP___pendingDefiInteractionsResult {
    let result = super.call(
      "pendingDefiInteractions",
      "pendingDefiInteractions(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new RP___pendingDefiInteractionsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_pendingDefiInteractions(
    param0: BigInt
  ): ethereum.CallResult<RP___pendingDefiInteractionsResult> {
    let result = super.tryCall(
      "pendingDefiInteractions",
      "pendingDefiInteractions(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RP___pendingDefiInteractionsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  prevDefiInteractionsHash(): Bytes {
    let result = super.call(
      "prevDefiInteractionsHash",
      "prevDefiInteractionsHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_prevDefiInteractionsHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "prevDefiInteractionsHash",
      "prevDefiInteractionsHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  processAsyncDefiInteraction(interactionNonce: BigInt): boolean {
    let result = super.call(
      "processAsyncDefiInteraction",
      "processAsyncDefiInteraction(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(interactionNonce)]
    );

    return result[0].toBoolean();
  }

  try_processAsyncDefiInteraction(
    interactionNonce: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "processAsyncDefiInteraction",
      "processAsyncDefiInteraction(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(interactionNonce)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rollupProviders(param0: Address): boolean {
    let result = super.call(
      "rollupProviders",
      "rollupProviders(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_rollupProviders(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rollupProviders",
      "rollupProviders(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rollupStateHash(): Bytes {
    let result = super.call(
      "rollupStateHash",
      "rollupStateHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_rollupStateHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "rollupStateHash",
      "rollupStateHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userPendingDeposits(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "userPendingDeposits",
      "userPendingDeposits(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userPendingDeposits(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPendingDeposits",
      "userPendingDeposits(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifier(): Address {
    let result = super.call("verifier", "verifier():(address)", []);

    return result[0].toAddress();
  }

  try_verifier(): ethereum.CallResult<Address> {
    let result = super.tryCall("verifier", "verifier():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ApproveProofCall extends ethereum.Call {
  get inputs(): ApproveProofCall__Inputs {
    return new ApproveProofCall__Inputs(this);
  }

  get outputs(): ApproveProofCall__Outputs {
    return new ApproveProofCall__Outputs(this);
  }
}

export class ApproveProofCall__Inputs {
  _call: ApproveProofCall;

  constructor(call: ApproveProofCall) {
    this._call = call;
  }

  get _proofHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ApproveProofCall__Outputs {
  _call: ApproveProofCall;

  constructor(call: ApproveProofCall) {
    this._call = call;
  }
}

export class DepositPendingFundsCall extends ethereum.Call {
  get inputs(): DepositPendingFundsCall__Inputs {
    return new DepositPendingFundsCall__Inputs(this);
  }

  get outputs(): DepositPendingFundsCall__Outputs {
    return new DepositPendingFundsCall__Outputs(this);
  }
}

export class DepositPendingFundsCall__Inputs {
  _call: DepositPendingFundsCall;

  constructor(call: DepositPendingFundsCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get proofHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DepositPendingFundsCall__Outputs {
  _call: DepositPendingFundsCall;

  constructor(call: DepositPendingFundsCall) {
    this._call = call;
  }
}

export class DepositPendingFundsPermitCall extends ethereum.Call {
  get inputs(): DepositPendingFundsPermitCall__Inputs {
    return new DepositPendingFundsPermitCall__Inputs(this);
  }

  get outputs(): DepositPendingFundsPermitCall__Outputs {
    return new DepositPendingFundsPermitCall__Outputs(this);
  }
}

export class DepositPendingFundsPermitCall__Inputs {
  _call: DepositPendingFundsPermitCall;

  constructor(call: DepositPendingFundsPermitCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get depositorAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get proofHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class DepositPendingFundsPermitCall__Outputs {
  _call: DepositPendingFundsPermitCall;

  constructor(call: DepositPendingFundsPermitCall) {
    this._call = call;
  }
}

export class DepositPendingFundsPermitNonStandardCall extends ethereum.Call {
  get inputs(): DepositPendingFundsPermitNonStandardCall__Inputs {
    return new DepositPendingFundsPermitNonStandardCall__Inputs(this);
  }

  get outputs(): DepositPendingFundsPermitNonStandardCall__Outputs {
    return new DepositPendingFundsPermitNonStandardCall__Outputs(this);
  }
}

export class DepositPendingFundsPermitNonStandardCall__Inputs {
  _call: DepositPendingFundsPermitNonStandardCall;

  constructor(call: DepositPendingFundsPermitNonStandardCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get depositorAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get proofHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get nonce(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class DepositPendingFundsPermitNonStandardCall__Outputs {
  _call: DepositPendingFundsPermitNonStandardCall;

  constructor(call: DepositPendingFundsPermitNonStandardCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _verifierAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _defiBridgeProxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _contractOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _initDataRoot(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _initNullRoot(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _initRootRoot(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _initDatasize(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _allowThirdPartyContracts(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OffchainDataCall extends ethereum.Call {
  get inputs(): OffchainDataCall__Inputs {
    return new OffchainDataCall__Inputs(this);
  }

  get outputs(): OffchainDataCall__Outputs {
    return new OffchainDataCall__Outputs(this);
  }
}

export class OffchainDataCall__Inputs {
  _call: OffchainDataCall;

  constructor(call: OffchainDataCall) {
    this._call = call;
  }

  get rollupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get chunk(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalChunks(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OffchainDataCall__Outputs {
  _call: OffchainDataCall;

  constructor(call: OffchainDataCall) {
    this._call = call;
  }
}

export class ProcessAsyncDefiInteractionCall extends ethereum.Call {
  get inputs(): ProcessAsyncDefiInteractionCall__Inputs {
    return new ProcessAsyncDefiInteractionCall__Inputs(this);
  }

  get outputs(): ProcessAsyncDefiInteractionCall__Outputs {
    return new ProcessAsyncDefiInteractionCall__Outputs(this);
  }
}

export class ProcessAsyncDefiInteractionCall__Inputs {
  _call: ProcessAsyncDefiInteractionCall;

  constructor(call: ProcessAsyncDefiInteractionCall) {
    this._call = call;
  }

  get interactionNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessAsyncDefiInteractionCall__Outputs {
  _call: ProcessAsyncDefiInteractionCall;

  constructor(call: ProcessAsyncDefiInteractionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ProcessRollupCall extends ethereum.Call {
  get inputs(): ProcessRollupCall__Inputs {
    return new ProcessRollupCall__Inputs(this);
  }

  get outputs(): ProcessRollupCall__Outputs {
    return new ProcessRollupCall__Outputs(this);
  }
}

export class ProcessRollupCall__Inputs {
  _call: ProcessRollupCall;

  constructor(call: ProcessRollupCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get signatures(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ProcessRollupCall__Outputs {
  _call: ProcessRollupCall;

  constructor(call: ProcessRollupCall) {
    this._call = call;
  }
}

export class ReceiveEthFromBridgeCall extends ethereum.Call {
  get inputs(): ReceiveEthFromBridgeCall__Inputs {
    return new ReceiveEthFromBridgeCall__Inputs(this);
  }

  get outputs(): ReceiveEthFromBridgeCall__Outputs {
    return new ReceiveEthFromBridgeCall__Outputs(this);
  }
}

export class ReceiveEthFromBridgeCall__Inputs {
  _call: ReceiveEthFromBridgeCall;

  constructor(call: ReceiveEthFromBridgeCall) {
    this._call = call;
  }

  get interactionNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReceiveEthFromBridgeCall__Outputs {
  _call: ReceiveEthFromBridgeCall;

  constructor(call: ReceiveEthFromBridgeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAllowThirdPartyContractsCall extends ethereum.Call {
  get inputs(): SetAllowThirdPartyContractsCall__Inputs {
    return new SetAllowThirdPartyContractsCall__Inputs(this);
  }

  get outputs(): SetAllowThirdPartyContractsCall__Outputs {
    return new SetAllowThirdPartyContractsCall__Outputs(this);
  }
}

export class SetAllowThirdPartyContractsCall__Inputs {
  _call: SetAllowThirdPartyContractsCall;

  constructor(call: SetAllowThirdPartyContractsCall) {
    this._call = call;
  }

  get _flag(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAllowThirdPartyContractsCall__Outputs {
  _call: SetAllowThirdPartyContractsCall;

  constructor(call: SetAllowThirdPartyContractsCall) {
    this._call = call;
  }
}

export class SetDefiBridgeProxyCall extends ethereum.Call {
  get inputs(): SetDefiBridgeProxyCall__Inputs {
    return new SetDefiBridgeProxyCall__Inputs(this);
  }

  get outputs(): SetDefiBridgeProxyCall__Outputs {
    return new SetDefiBridgeProxyCall__Outputs(this);
  }
}

export class SetDefiBridgeProxyCall__Inputs {
  _call: SetDefiBridgeProxyCall;

  constructor(call: SetDefiBridgeProxyCall) {
    this._call = call;
  }

  get defiBridgeProxyAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDefiBridgeProxyCall__Outputs {
  _call: SetDefiBridgeProxyCall;

  constructor(call: SetDefiBridgeProxyCall) {
    this._call = call;
  }
}

export class SetRollupProviderCall extends ethereum.Call {
  get inputs(): SetRollupProviderCall__Inputs {
    return new SetRollupProviderCall__Inputs(this);
  }

  get outputs(): SetRollupProviderCall__Outputs {
    return new SetRollupProviderCall__Outputs(this);
  }
}

export class SetRollupProviderCall__Inputs {
  _call: SetRollupProviderCall;

  constructor(call: SetRollupProviderCall) {
    this._call = call;
  }

  get providerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get valid(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRollupProviderCall__Outputs {
  _call: SetRollupProviderCall;

  constructor(call: SetRollupProviderCall) {
    this._call = call;
  }
}

export class SetSupportedAssetCall extends ethereum.Call {
  get inputs(): SetSupportedAssetCall__Inputs {
    return new SetSupportedAssetCall__Inputs(this);
  }

  get outputs(): SetSupportedAssetCall__Outputs {
    return new SetSupportedAssetCall__Outputs(this);
  }
}

export class SetSupportedAssetCall__Inputs {
  _call: SetSupportedAssetCall;

  constructor(call: SetSupportedAssetCall) {
    this._call = call;
  }

  get linkedToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSupportedAssetCall__Outputs {
  _call: SetSupportedAssetCall;

  constructor(call: SetSupportedAssetCall) {
    this._call = call;
  }
}

export class SetSupportedBridgeCall extends ethereum.Call {
  get inputs(): SetSupportedBridgeCall__Inputs {
    return new SetSupportedBridgeCall__Inputs(this);
  }

  get outputs(): SetSupportedBridgeCall__Outputs {
    return new SetSupportedBridgeCall__Outputs(this);
  }
}

export class SetSupportedBridgeCall__Inputs {
  _call: SetSupportedBridgeCall;

  constructor(call: SetSupportedBridgeCall) {
    this._call = call;
  }

  get linkedBridge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSupportedBridgeCall__Outputs {
  _call: SetSupportedBridgeCall;

  constructor(call: SetSupportedBridgeCall) {
    this._call = call;
  }
}

export class SetVerifierCall extends ethereum.Call {
  get inputs(): SetVerifierCall__Inputs {
    return new SetVerifierCall__Inputs(this);
  }

  get outputs(): SetVerifierCall__Outputs {
    return new SetVerifierCall__Outputs(this);
  }
}

export class SetVerifierCall__Inputs {
  _call: SetVerifierCall;

  constructor(call: SetVerifierCall) {
    this._call = call;
  }

  get _verifierAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVerifierCall__Outputs {
  _call: SetVerifierCall;

  constructor(call: SetVerifierCall) {
    this._call = call;
  }
}
