// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AssetAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AssetAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AssetAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AssetAdded", id.toString(), this);
    }
  }

  static load(id: string): AssetAdded | null {
    return changetype<AssetAdded | null>(store.get("AssetAdded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get assetId(): BigInt {
    let value = this.get("assetId");
    return value!.toBigInt();
  }

  set assetId(value: BigInt) {
    this.set("assetId", Value.fromBigInt(value));
  }

  get assetAddress(): Bytes {
    let value = this.get("assetAddress");
    return value!.toBytes();
  }

  set assetAddress(value: Bytes) {
    this.set("assetAddress", Value.fromBytes(value));
  }

  get assetGasLimit(): BigInt {
    let value = this.get("assetGasLimit");
    return value!.toBigInt();
  }

  set assetGasLimit(value: BigInt) {
    this.set("assetGasLimit", Value.fromBigInt(value));
  }
}

export class AsyncDefiBridgeProcessed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AsyncDefiBridgeProcessed entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AsyncDefiBridgeProcessed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AsyncDefiBridgeProcessed", id.toString(), this);
    }
  }

  static load(id: string): AsyncDefiBridgeProcessed | null {
    return changetype<AsyncDefiBridgeProcessed | null>(
      store.get("AsyncDefiBridgeProcessed", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get bridgeId(): BigInt {
    let value = this.get("bridgeId");
    return value!.toBigInt();
  }

  set bridgeId(value: BigInt) {
    this.set("bridgeId", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get totalInputValue(): BigInt {
    let value = this.get("totalInputValue");
    return value!.toBigInt();
  }

  set totalInputValue(value: BigInt) {
    this.set("totalInputValue", Value.fromBigInt(value));
  }
}

export class BridgeAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BridgeAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BridgeAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BridgeAdded", id.toString(), this);
    }
  }

  static load(id: string): BridgeAdded | null {
    return changetype<BridgeAdded | null>(store.get("BridgeAdded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get bridgeAddressId(): BigInt {
    let value = this.get("bridgeAddressId");
    return value!.toBigInt();
  }

  set bridgeAddressId(value: BigInt) {
    this.set("bridgeAddressId", Value.fromBigInt(value));
  }

  get bridgeAddress(): Bytes {
    let value = this.get("bridgeAddress");
    return value!.toBytes();
  }

  set bridgeAddress(value: Bytes) {
    this.set("bridgeAddress", Value.fromBytes(value));
  }

  get bridgeGasLimit(): BigInt {
    let value = this.get("bridgeGasLimit");
    return value!.toBigInt();
  }

  set bridgeGasLimit(value: BigInt) {
    this.set("bridgeGasLimit", Value.fromBigInt(value));
  }
}

export class DefiBridgeProcessed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DefiBridgeProcessed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DefiBridgeProcessed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DefiBridgeProcessed", id.toString(), this);
    }
  }

  static load(id: string): DefiBridgeProcessed | null {
    return changetype<DefiBridgeProcessed | null>(
      store.get("DefiBridgeProcessed", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get bridgeId(): BigInt {
    let value = this.get("bridgeId");
    return value!.toBigInt();
  }

  set bridgeId(value: BigInt) {
    this.set("bridgeId", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get totalInputValue(): BigInt {
    let value = this.get("totalInputValue");
    return value!.toBigInt();
  }

  set totalInputValue(value: BigInt) {
    this.set("totalInputValue", Value.fromBigInt(value));
  }

  get totalOutputValueA(): BigInt {
    let value = this.get("totalOutputValueA");
    return value!.toBigInt();
  }

  set totalOutputValueA(value: BigInt) {
    this.set("totalOutputValueA", Value.fromBigInt(value));
  }

  get totalOutputValueB(): BigInt {
    let value = this.get("totalOutputValueB");
    return value!.toBigInt();
  }

  set totalOutputValueB(value: BigInt) {
    this.set("totalOutputValueB", Value.fromBigInt(value));
  }

  get result(): boolean {
    let value = this.get("result");
    return value!.toBoolean();
  }

  set result(value: boolean) {
    this.set("result", Value.fromBoolean(value));
  }

  get errorReason(): Bytes {
    let value = this.get("errorReason");
    return value!.toBytes();
  }

  set errorReason(value: Bytes) {
    this.set("errorReason", Value.fromBytes(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get assetId(): BigInt {
    let value = this.get("assetId");
    return value!.toBigInt();
  }

  set assetId(value: BigInt) {
    this.set("assetId", Value.fromBigInt(value));
  }

  get depositorAddress(): Bytes {
    let value = this.get("depositorAddress");
    return value!.toBytes();
  }

  set depositorAddress(value: Bytes) {
    this.set("depositorAddress", Value.fromBytes(value));
  }

  get depositValue(): BigInt {
    let value = this.get("depositValue");
    return value!.toBigInt();
  }

  set depositValue(value: BigInt) {
    this.set("depositValue", Value.fromBigInt(value));
  }
}

export class Initialized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Initialized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Initialized must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Initialized", id.toString(), this);
    }
  }

  static load(id: string): Initialized | null {
    return changetype<Initialized | null>(store.get("Initialized", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get version(): i32 {
    let value = this.get("version");
    return value!.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }
}

export class OffchainData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OffchainData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OffchainData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OffchainData", id.toString(), this);
    }
  }

  static load(id: string): OffchainData | null {
    return changetype<OffchainData | null>(store.get("OffchainData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get rollupId(): BigInt {
    let value = this.get("rollupId");
    return value!.toBigInt();
  }

  set rollupId(value: BigInt) {
    this.set("rollupId", Value.fromBigInt(value));
  }

  get chunk(): BigInt {
    let value = this.get("chunk");
    return value!.toBigInt();
  }

  set chunk(value: BigInt) {
    this.set("chunk", Value.fromBigInt(value));
  }

  get totalChunks(): BigInt {
    let value = this.get("totalChunks");
    return value!.toBigInt();
  }

  set totalChunks(value: BigInt) {
    this.set("totalChunks", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }
}

export class RollupProcessed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RollupProcessed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RollupProcessed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RollupProcessed", id.toString(), this);
    }
  }

  static load(id: string): RollupProcessed | null {
    return changetype<RollupProcessed | null>(store.get("RollupProcessed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get cumulativeGasUsed(): BigInt | null {
    let value = this.get("cumulativeGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeGasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("cumulativeGasUsed");
    } else {
      this.set("cumulativeGasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get rollupId(): BigInt {
    let value = this.get("rollupId");
    return value!.toBigInt();
  }

  set rollupId(value: BigInt) {
    this.set("rollupId", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }
}

export class RollupProviderUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RollupProviderUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RollupProviderUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RollupProviderUpdated", id.toString(), this);
    }
  }

  static load(id: string): RollupProviderUpdated | null {
    return changetype<RollupProviderUpdated | null>(
      store.get("RollupProviderUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get providerAddress(): Bytes {
    let value = this.get("providerAddress");
    return value!.toBytes();
  }

  set providerAddress(value: Bytes) {
    this.set("providerAddress", Value.fromBytes(value));
  }

  get valid(): boolean {
    let value = this.get("valid");
    return value!.toBoolean();
  }

  set valid(value: boolean) {
    this.set("valid", Value.fromBoolean(value));
  }
}

export class VerifierUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VerifierUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VerifierUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VerifierUpdated", id.toString(), this);
    }
  }

  static load(id: string): VerifierUpdated | null {
    return changetype<VerifierUpdated | null>(store.get("VerifierUpdated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get verifierAddress(): Bytes {
    let value = this.get("verifierAddress");
    return value!.toBytes();
  }

  set verifierAddress(value: Bytes) {
    this.set("verifierAddress", Value.fromBytes(value));
  }
}

export class WithdrawError extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawError entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawError must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawError", id.toString(), this);
    }
  }

  static load(id: string): WithdrawError | null {
    return changetype<WithdrawError | null>(store.get("WithdrawError", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (!value) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get errorReason(): Bytes {
    let value = this.get("errorReason");
    return value!.toBytes();
  }

  set errorReason(value: Bytes) {
    this.set("errorReason", Value.fromBytes(value));
  }
}
