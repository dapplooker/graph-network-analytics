type AssetAdded @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  assetId: BigInt! # uint256
  assetAddress: Bytes! # address
  assetGasLimit: BigInt! # uint256
}

type AsyncDefiBridgeProcessed @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  bridgeId: BigInt! # uint256
  nonce: BigInt! # uint256
  totalInputValue: BigInt! # uint256
}

type BridgeAdded @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  bridgeAddressId: BigInt! # uint256
  bridgeAddress: Bytes! # address
  bridgeGasLimit: BigInt! # uint256
}

type DefiBridgeProcessed @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  bridgeId: BigInt! # uint256
  nonce: BigInt! # uint256
  totalInputValue: BigInt! # uint256
  totalOutputValueA: BigInt! # uint256
  totalOutputValueB: BigInt! # uint256
  result: Boolean! # bool
  errorReason: Bytes! # bytes
}

type Deposit @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  assetId: BigInt! # uint256
  depositorAddress: Bytes! # address
  depositValue: BigInt! # uint256
}

type Initialized @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  version: Int! # uint8
}

type OffchainData @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  rollupId: BigInt! # uint256
  chunk: BigInt! # uint256
  totalChunks: BigInt! # uint256
  sender: Bytes! # address
}

type RollupProcessed @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasLimit: BigInt
  gasPrice: BigInt
  gasUsed: BigInt
  cumulativeGasUsed: BigInt
  timestamp: BigInt! # uint256
  rollupId: BigInt! # uint256
  sender: Bytes! # address
}

type RollupProviderUpdated @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  providerAddress: Bytes! # address
  valid: Boolean! # bool
}

type VerifierUpdated @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  verifierAddress: Bytes! # address
}

type WithdrawError @entity {
  id: ID!
  txHash: Bytes
  fromAddress: Bytes # address
  toAddress: Bytes # address
  valueTransferred: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  timestamp: BigInt! # uint256
  errorReason: Bytes! # bytes
}
